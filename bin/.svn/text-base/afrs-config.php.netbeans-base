#!/usr/bin/php 
<?php

require_once(__DIR__."/../conf/afrs_config.php");
require_once(__DIR__."/../conf/afrs_vars.php");
require_once(__DIR__."/../includes/functions.php");
//require_once("includes/system/System.php");
require_once(__DIR__."/../includes/network/AfrsClient.php");
require_once(__DIR__."/../includes/database/DbConnectionWrapper.php");
require_once(__DIR__."/../includes/database/QueryWrapper.php");


$afrs_client_obj = new AfrsClient("localhost", 4746, 10);  // Use this to send configuration info to local server.
$dbconn = new DbConnectionWrapper($dbtype, $dbhost, $dbname, $dbuser, $dbpassword);
$query = new QueryWrapper($dbconn);
$choice_array = null;
$yesno_map = array("yes" => 1, "no" => 0, 1 => "yes", 0 => "no");

passthru("clear");

echo "Running pre-checks...\n";

$query->runQuery("select count(id) as count from tbl_devices");
$device_count = $query->getResultArray();
if ($device_count["count"] == 0)
{
	echo "  WARNING:  You don't have any storage devices configured.\n";
	echo "  Would you like to setup disks for AFRS now? (y/n): ";
	$input = trim(fgets(STDIN));
	
	if ($input == "y")
	{
		harddrive_setup();
	}
}

$query->runQuery("select count(id) as count from tbl_inet_devices");
$inet_device_count = $query->getResultArray();
if ($inet_device_count["count"] == 0)
{
	echo "  WARNING:  You don't have any network interfaces configured for AFRS.\n";
	echo "  Would you like to setup your network interfaces for AFRS now?: ";
	$input = trim(fgets(STDIN));
	
	if ($input == "y")
	{
		inet_setup();
	}
}

begin();

function begin()
{
	echo "\nAFRS Configurator:

	1.)	Network devices
	2.)	Sync partners
	3.)	Watched locations
        4.)     Shares

	Selection: ";

	$input = trim(fgets(STDIN));

	if ($input == 1)
	{
		inet_setup();
	}
	else if ($input == 2)
	{
		syncpartners_setup();
	}
	else if ($input == 3)
	{
		watchedlocations_setup();
                begin();
	}
        else if ($input == 4)
        {
            shares_setup();
        }
}

function harddrive_setup()
{
	global $choice_array, $query;
	echo "  Setting up hard drives for afrs...\n";
	$scsi_count = exec("cat /proc/scsi/scsi | grep -c Host:");
	//$ata_count = exec("cat /proc/hdd/hdd | grep -c Host:");
	//echo "    Found " . $scsi_count . " SCSI devices and " . $ata_count . " ATA/SATA devices.\n";
	
	
	// location of UUID for drives is: ls -al /dev/disk/by-uuid/
	$fstab_location = "/etc/fstab";
	
	// Get the list of supported filesystems by this host.
	$kernel_version = exec("uname -r");
	$fs_list_path = "/lib/modules/" . $kernel_version . "/kernel/fs";
	$files_and_dirs = array_diff(scandir($fs_list_path), array('.', '..'));
	$num_supported_fs = sizeof($files_and_dirs);

	// Input the supported filesystems into the tbl_filesystems tables if they don't already exist.
	foreach($files_and_dirs as $this_fs_type)
	{
		$query->runQuery("select * from tbl_filesystems where fs_type = '$this_fs_type'");
		$result_size = $query->getResultSize();

		if ($result_size == 0)
		{
			$query->runQuery("insert into tbl_filesystems
					   (fs_type, is_supported)
					   values('$this_fs_type', 1)");
		}
	}


	$mount_output = `mount`;
	$mount_array = array_values(preg_grep("/^\/dev/",preg_split("/\n/", $mount_output)));
	echo "\n    Currently mounted partitions that are supported by AFRS are:\n";
	
	$query->runQuery("select * from tbl_filesystems where is_supported = 1");
	$supported_array = $query->getResultsArray();
	
	// Search for the mounted partitions that are supported.
	$count = 1;
	foreach($supported_array as $this_supported_fs)
	{
		for($i = 0; $i < sizeof($mount_array); $i++)//$mount_array as $this_mount)
		{
			$fs_type = $this_supported_fs["fs_type"];
			if (preg_match("/$fs_type/", $mount_array[$i]) > 0)
			{
				$choice_array[$count] = $mount_array[$i];
				echo "      " . ($count) . "). " . $mount_array[$i] . " \n";
				$count++;
			}
		}
	}
	echo "\n--> Which device would you like to setup?: ";
	$input = trim(fgets(STDIN));
	echo "--> Is this device removable? (y/n): ";
	$is_removable = trim(fgets(STDIN));
	$dev_array = split(" ", $choice_array[$input]);  // Split so we can get the devices name e.g. /dev/xxx.
	
	$udev_output = `udevinfo --query=all  --name $dev_array[0]`;
	
	$dev_id = array_values(preg_grep("/ID_SERIAL=/",preg_split("/\n/", $udev_output)));  // Need to use array_values so we can index the return array at [0].
	$dev_id = split("=", $dev_id[0]);
	$dev_id = trim($dev_id[1]);
	
	$vendor = array_values(preg_grep("/ID_VENDOR=/",preg_split("/\n/", $udev_output)));  // Need to use array_values so we can index the return array at [0].
	$vendor = split("=", $vendor[0]);
	$vendor = trim($vendor[1]);
	
	$model = array_values(preg_grep("/ID_MODEL=/",preg_split("/\n/", $udev_output)));  // Need to use array_values so we can index the return array at [0].
	$model = split("=", $model[0]);
	$model = trim($model[1]);
	$manufacturer = $vendor . "-" . $model;
	
	$dev_size = disk_total_space($dev_array[2]);
	$dev_free_space = disk_free_space($dev_array[2]);
	
	if ($is_removable == "y")
	{
		$is_removable = 1;
	}
	else if ($is_removable == "n")
	{
		$is_removable = 0;
	}
	else
	{
		$is_removable = 0;
	}
	
	$query->runQuery("insert into tbl_devices
						(device_id, manufacturer, is_removable, size, free_space, date_added)
						values('$dev_id', '$manufacturer', $is_removable, $dev_size, $dev_free_space, NOW())");
						
	// Now we create entries for the tbl_mounts table.
	$last_dev_insert_id = $query->getInsertID();
	$mount_point = $dev_array[2];
	
	$query->runQuery("insert into tbl_mounts
						(fk_device_id, mount_path, is_mounted)
						values($last_dev_insert_id, '$mount_point', 1)");
	
	exit(0);
	echo "Done.\n";
}

function inet_setup()
{
    // TODO:  use the device IDs from the /sys/class/net directory and look up the device names from the PCI device online database.
    
	global $choice_array, $query;
        $fqdn = null;
        $choice = null;
        $inet_devices_array = null;  // An associative array that holds the device info.
        
        // First let's query the db and see what device we currently have configured for afrs.
        $query->runQuery("select * from tbl_inet_devices");
        $current_inet_devices_array = $query->getResultsAssoc();
        if (sizeof($current_inet_devices_array) == 0)
        {
            echo "\nNo network devices are currently configured for AFRS.  Please choose from the below list:\n";
        }
        else if (sizeof($current_inet_devices_array) > 0)
        {
            echo "\nList of current enabled devices for AFRS:\n";
            for($i = 0; $i < sizeof($current_inet_devices_array); $i++)
            {
                $inet_dev_name = $current_inet_devices_array[$i]["device_name"];
                $current_inet_devices_array[$i]["link_detected"] = trim(shell_exec("cat /sys/class/net/$inet_dev_name/carrier"));
                $current_inet_devices_array[$i]["state"] = trim(shell_exec("cat /sys/class/net/$inet_dev_name/operstate"));
                
                echo ($i +1) . ".)  Dev: " . $current_inet_devices_array[$i]["device_name"] . "  Mac: " . $current_inet_devices_array[$i]["mac"] . "  Ip: " . $current_inet_devices_array[$i]["ip"] . "\n";
            }
            echo "\nOperation list: a = add new device to afrs.\n                x = delete existing device from afrs\nChoice: ";
            $choice = trim(fgets(STDIN));
            
            if ($choice == "a" or $choice == "A")
            {
                $available_inet_devices = null;
                
                echo "\nAvailable network devices to be added to AFRS:...";
                
                // TODO:  Need to support multiple network interfaces.
                echo "DEVS:  FIX ME.  I NEED MULTI INTERFACE SUPPORT!!!!\n";
                
                // Get devices from the system that don't have the same mac address as thos already configured 
                // in the afrs db.  This will give us a list for the user to add.
                $inet_macs_array = get_inet_macs();
                $inet_mac_keys = array_keys($inet_macs_array); // Get the ethernet names which are the keys.
                $count = 0;
                
                for($i = 0; $i < sizeof($inet_mac_keys); $i++)
                {
                    $found = false;
                    for($j = 0; $j < sizeof($current_inet_devices_array); $j++)
                    {
                        if ($inet_mac_keys[$i] == $current_inet_devices_array[$j]["device_name"])
                        {
                            $found = true;
                        }
                    }
                    if (!$found)
                    {
                        $this_available_inet_device = get_inet_info_for_device($inet_mac_keys[$i]);
                        
                        // Only list the device as available to be added to afrs if it's up and has a link on it.
                        if ($this_available_inet_device["state"] == "up" && $this_available_inet_device["link_detected"] == 1)
                        {
                            $available_inet_devices[] = $this_available_inet_device;
                            echo "\n" . ($i +1) . ".)  Dev: " . $this_available_inet_device["name"] . "  Mac: " . $this_available_inet_device["mac"] . "  Ip: " . $this_available_inet_device["ip_address"] . "\n";
                            $count++;
                        }
                    }
                }
                if ($count == 0)
                {
                    echo "None.\n";
                }
            }
            exit(0);
        }
        
	
	echo "  \nSearching for network devices... ";
        $inet_devices_array = get_inet_info();  // Get a 3-d associative array of network devices and their attributes.
        
        $inet_device_names = preg_split("/\n/", shell_exec("ifconfig -s | cut -d ' ' -f 1 | tail -n +2"));
        unset($inet_device_names[(sizeof($inet_device_names) - 1)]);  // Get rid of the extra trailing backspace.
        unset($inet_device_names[array_search("lo", $inet_device_names)]);  // Get rid of the loopback device "lo".
        $inet_device_names = array_merge(array(), $inet_device_names);  // Fix the array indexes after we deleted some elements.
	$inet_device_count = sizeof($inet_device_names);
	if ($inet_device_count > 0)  // Make sure we have devices to work with.
	{
            echo "  Found " . $inet_device_count . ".\n";

            for($i = 0; $i < sizeof($inet_devices_array); $i++)
            {
                $usable = null;
                $link_detected_desc = null;
                
                if ($inet_devices_array[$i]["link_detected"] == "1")
                {
                    $link_detected_desc = "link detected";
                }
                else
                {
                    $link_detected_desc = "no link detected";
                }
                if ($inet_devices_array[$i]["state"] == "down" || $inet_devices_array[$i]["link_detected"] == 0)
                {
                    $usable = " (Unusable - since state is down and/or no link detected.)";
                }
                echo "\n    " . ($i + 1) . ".)" . $usable . "\n        Dev:     " . $inet_devices_array[$i]["name"] . "\n        Mac:     " . $inet_devices_array[$i]["mac"] .  "\n        Addr:    " . $inet_devices_array[$i]["ip_address"] . "\n        Gateway: " . $inet_devices_array[$i]["gateway"] . "\n        Subnet:  " . $inet_devices_array[$i]["mask"] . "\n        Bcast:   " . $inet_devices_array[$i]["broadcast"] . "\n        Speed:   " . $inet_devices_array[$i]["speed"] . " Mbps" . "\n        Dns:     " . $inet_devices_array[$i]["nameserver"] . "\n" . "        Status:  " . $inet_devices_array[$i]["state"] .  "\n" . "        Link status: " . $link_detected_desc . "\n";
            }

            echo "\n  --> Please choose the device number to configure for AFRS: ";
            $dev_choice = trim(fgets(STDIN));
            echo "  --> What is the Fully Qualified Domain Name for this address?: ";
            $fqdn_input = trim(fgets(STDIN));

            $dns_query_output_array = dns_get_record("$fqdn_input", DNS_A);  // We only care about the "A" record dns answer.
            
            if (!$dns_query_output_array)
            {
                // No DNS entry for the name.  Using it's IP address for the fqdn.
                echo "  --> Could not validate the name you entered.  Do you want use the IP as the fqdn? (y/n): ";
                $dns_error_response = strim(fgets(STDIN));
                if ($dns_error_response == "y" or $dns_error_response == "Y")
                {
                    $fqdn = $inet_devices_array[($dev_choice - 1)]["ip_address"];
                }
                else
                {
                    echo "  --> Can't go any further then.  Please fix and try again.\n";
                }
            }
            else
            {
                // Got a valid dns A record response for this name.
                if ($dns_query_output_array[0]["ip"] = $inet_devices_array[($dev_choice - 1)]["ip_address"])
                {
                    echo "DNS query succeeded\n";
                    $fqdn = $fqdn_input;
                }
                else
                {
                    echo "ERROR:  DNS answer for " . $fqdn_input . " has a different IP address than the one used for interface " . $inet_devices_array[($dev_choice - 1)]["name"] . "\n";
                    exit(1);
                }
            }

            // Now insert the data into the afrsd database.
            $inet_device_name = addslashes($inet_devices_array[($dev_choice - 1)]["name"]);
            $inet_mac = addslashes($inet_devices_array[($dev_choice - 1)]["mac"]);
            $inet_address = addslashes($inet_devices_array[($dev_choice - 1)]["ip_address"]);
            $inet_broadcast = addslashes($inet_devices_array[($dev_choice - 1)]["broadcast"]);
            $inet_subnet = addslashes($inet_devices_array[($dev_choice - 1)]["mask"]);
            $inet_gateway = addslashes($inet_devices_array[($dev_choice - 1)]["gateway"]);
            $nameserver = addslashes($inet_devices_array[($dev_choice - 1)]["nameserver"]);
            $fqdn = addslashes($fqdn);
            $speed = addslashes($inet_devices_array[($dev_choice - 1)]["speed"]);
            $status = null;
            if ($inet_devices_array[($dev_choice - 1)]["state"] == "up")
            {
                $status = 1;
            }
            else if ($inet_devices_array[($dev_choice - 1)]["state"] == "down")
            {
                $status = 0;
            }
                    
            $link_state = $inet_devices_array[($dev_choice - 1)]["link_detected"];
       
            if($query->runQuery("insert into tbl_inet_devices
                                       (device_name,mac,ip,broadcast,subnet_mask,gateway,dns1,fqdn,speed,status,link_state)
                                       values('$inet_device_name','$inet_mac','$inet_address','$inet_broadcast','$inet_subnet','$inet_gateway','$nameserver','$fqdn',$speed,$status,$link_state)"))
            {
                echo "Successfully added device to the database.\n";
            }
            else
            {
                echo "ERROR:  Failed to add interface to database.  Please see previous errors and correct.\n";
                exit(1);
            }


	}
	else
	{
		echo "No ethernet devices found.  Please configure an ethernet device on your system and rerun this setup script.\n";
		return (false);
	}
}

function syncpartners_setup()
{
	global $query, $afrs_client_obj;
	
	$query->runQuery("select * from tbl_sync_partners");
	$sync_partners_count = $query->getResultSize();
	$sync_partners_array = $query->getResultsAssoc();
	
	
	if ($sync_partners_count > 0)
        {
            echo "\nYou currently have " . $sync_partners_count . " sync partners configured.  They are:\n";
            for($i = 0; $i < sizeof($sync_partners_array); $i++)
            {
                $partner_status = null;
                $partner_is_nated = null;
                if ($sync_partners_array[$i]["status"] == 1)
                {
                    $partner_status = "Online";
                }
                else
                {
                    $partner_status = "offline";
                }
                if ($sync_partners_array[$i]["is_nated"] == 1)
                {
                    $partner_is_nated = "Yes";
                }
                else
                {
                    $partner_is_nated = "No";
                }
                echo ($i +1) . ".)  " . $sync_partners_array[$i]["fqdn"] . "\n     Ip:\t\t" . $sync_partners_array[$i]["ip_address"] . "\n     Public Ip:\t\t" . $sync_partners_array[$i]["public_ip_address"] . "\n     Is Nated:\t\t" . $partner_is_nated . "\n     Status:\t\t" . $partner_status . "\n     Date Added:\t". $sync_partners_array[$i]["date_added"] . "\n";
            }
        }
        
        // Get all pending requests to display to the user.
        $query->runQuery("select * from tbl_sync_partner_register_requests where initiator = 2");
        $sync_partner_register_requests_count = $query->getResultSize();
        $sync_partner_register_requests_array = null;
        
        if ($sync_partner_register_requests_count > 0)
        {
            $sync_partner_register_requests_array = $query->getResultsAssoc();
            
            echo "\nYou have " . $sync_partner_register_requests_count . " register request(s) pending from potential sync partners:\n\n";
            for($i = 0; $i < sizeof($sync_partner_register_requests_array); $i++)
            {
                echo ($i +1) . ".)\n";
                echo "\tFrom: " . $sync_partner_register_requests_array[$i]["fqdn"] . "\n";
                echo "\tPrivate IP: " . $sync_partner_register_requests_array[$i]["ip_address"] . "\n";
                echo "\tPublic IP: " . $sync_partner_register_requests_array[$i]["public_ip_address"] . "\n";
                echo "\tRequested at: " . $sync_partner_register_requests_array[$i]["date_requested"] . "\n";
                    
            }
            
            echo "\nWould you like to authorized any of the above requests? [all][n][1,2,3,...]: ";
            $input = trim(fgets(STDIN));
            
            if ($input != "n" or $input != "N")
            {
                if ($input == "all")
                {
                    

                }
                else
                {
                    if (sizeof($input) == 1)
                    {
                        // These will be proxied and values change in the Dispatcher class.
                        $sync_partner_register_requests_array;
                        $sync_add_ip = $sync_partner_register_requests_array[$input - 1]["ip_address"];
                        $sync_add_port = $sync_partner_register_requests_array[$input - 1]["port_number"];
                        $sync_add_fqdn = $sync_partner_register_requests_array[$input - 1]["fqdn"];
                        $sync_add_transaction_id = $sync_partner_register_requests_array[$input - 1]["transaction_id"];
                        $partner_parameters = array('ADDRESS' => $sync_add_ip,
                                                                    'PORT' => $sync_add_port,
                                                                    'NAME' => $sync_add_fqdn,
                                                                    'TIMEZONE' => 0,
                                                                    'BANDWIDTHUP' => 0,
                                                                    'BANDWIDTHDOWN' => 0,
                                                                    'AFRSVERSION' => 0,
                                                                    'PRIORITY' => 'medium');

                        $register_answer = $afrs_client_obj->registerNewSyncPartner($partner_parameters);
                        if ($register_answer === true)
                        {
                                echo "Successfully added " . $sync_add_fqdn . " to list of sync partners\n";
                        }
                        else if (is_object($register_answer))  //  If an object is returned, more than likely an error occured while communicating.
                        {
                                echo $register_answer->getCommand() . " -> " . $register_answer->getReplyNotes() . "\n";
                                begin();
                        }
                        else
                        {
                                echo "afrs-config::registerNewSyncParter() - ERROR: An uknown error occured\n";  // Display the error returned.
                                begin();  // Return the to begining of the config script.
                        }
                    }
                    elseif (sizeof($input) > 1)
                    {
                        $selection_array = explode(",", $input);
                    }
                    
                }
            }
        }
	
	echo "\n1.) Configure a new sync partner.
2.) Edit a sync_partner.
3.) Remove a sync partner.
4.) Back

Selection: ";
	
	$sync_input = trim(fgets(STDIN));
	
	if ($sync_input == 1)
	{
		echo "-- Configure a new sync partner --\n";
		echo "--> FQDN or short name of sync partner: ";
		$sync_add_fqdn = trim(fgets(STDIN));
		
		echo "--> IP address of sync partner (public if this is NATed behind a firewall: ";
		$sync_add_ip = trim(fgets(STDIN));
		
		echo "--> Port number of sync partner [4747]: ";
		$sync_add_port = trim(fgets(STDIN));
		if ($sync_add_port == null || $sync_add_port == "")
		{
			$sync_add_port = 4747;
		}

		$partner_parameters = array('ADDRESS' => $sync_add_ip,
								'PORT' => $sync_add_port,
								'NAME' => $sync_add_fqdn,
								'TIMEZONE' => 0,
								'BANDWIDTHUP' => 0,
								'BANDWIDTHDOWN' => 0,
								'AFRSVERSION' => 0,
								'PRIORITY' => 'medium');

		$register_answer = $afrs_client_obj->registerNewSyncPartner($partner_parameters);
		if ($register_answer === true)
		{
			echo "Successfully added " . $sync_add_fqdn . " to list of sync partners\n";
		}
		else if (is_object($register_answer))  //  If an object is returned, more than likely an error occured while communicating.
		{
			echo $register_answer->getCommand() . " -> " . $register_answer->getReplyNotes() . "\n";
			begin();
		}
		else
		{
			echo "afrs-config::registerNewSyncParter() - ERROR: An uknown error occured\n";  // Display the error returned.
			begin();  // Return the to begining of the config script.
		}

	} //End of configure new sync partner.
}

function watchedlocations_setup()
{
	global $query, $afrs_client_obj, $yesno_map;

	$query->runQuery("select * from tbl_watches");
	$tbl_watches_size = $query->getResultSize();
	$tbl_watches_array = $query->getResultsAssoc();

	echo "\nYou currently have the following watches defined:\n";
	for($i = 0; $i < $tbl_watches_size; $i++)
	{
		echo "=> Path: " . $tbl_watches_array[$i]["watch_path"] . "  Active: " . $tbl_watches_array[$i]["active"] . "  Syncable:" . $tbl_watches_array[$i]["sync"] . "\n";
	}

	echo "\n1.) Add a new watch location.
2.) Edit a watch location.
3.) Remove a watch location.
4.) Back

Selection: ";

	$user_input = trim(fgets(STDIN));

	if ($user_input == 1)
	{
                $exclusion_patterns = "NULL";
                $filter_by_group_owner = "NULL";
                $filter_by_user_owner = "NULL";
                $ignore_zero_files = 0;
                $verbose = 0;
                $allow_yelling = 0;
                $wait_amount = 2;
            
		echo "\nWatch location (full local path): ";
		$watch_path = addslashes(trim(fgets(STDIN)));
                while (is_dir($watch_path) === false)
                {
                    echo "ERROR:  Watch location does not exist.  Try again.\n";
                    echo "Watch location (full local path): ";
                    $watch_path = addslashes(trim(fgets(STDIN)));
                }
                
                echo "\nWatch name: ";
                $watch_name = addslashes(trim(fgets(STDIN)));
                while($watch_name == "" or $watch_name === null)
                {
                    echo "ERROR:  You did not specify a watch name.  Try again.\n";
                    echo "\nWatch name: ";
                    $watch_name = addslashes(trim(fgets(STDIN)));
                }
		
                echo "\nEvents (seperated by commas (no spaces).  Type \"help\" for a list of supported events).: ";
		$events = trim(fgets(STDIN));
                $events = explode(",", $events);
                $allowed_events = array("create", "delete", "modify", "open", "close", "move", "attribute", "all_events");
                $invalid_events = null;
                foreach($events as $this_event)
                {
                    if (!in_array($this_event, $allowed_events))
                    {
                        $invalid_events[] = $this_event;
                    }
                }
                while ($invalid_events != null)
                {
                    foreach($invalid_events as $this_invalid_event)
                    {
                        if ($this_invalid_event == "help")
                        {
                            echo "\nWatch events:  create,delete,modify,open,close,move,attribute,all_events";
                        }
                        else
                        {
                            echo "\nERROR: " . $this_invalid_event . " is not a recognized event!";
                        }
                    }
                    $invalid_events = null;
                    echo "\nEvents (seperated by commas (no spaces). Type \"help\" for a list of supported events).: ";
                    $events = trim(fgets(STDIN));
                    $events = explode(",", $events);
                    foreach($events as $this_event)
                    {
                        if (!in_array($this_event, $allowed_events))
                        {
                            $invalid_events[] = $this_event;
                        }
                    }
                }
                
                $events_lookup = $query->runQueryGetResults("select * from tbl_events", "assoc");
                $event_ids = null;
                for($i = 0; $i < sizeof($events); $i++)
                {
                    for($j = 0; $j < sizeof($events_lookup); $j++)
                    {
                        if ($events[$i] == $events_lookup[$j]["short_event_name"])
                        {
                            $event_ids[] = $events_lookup[$j]["id"];
                        }
                    }
                }
                $event_ids = implode(" ", $event_ids);
                
                echo "\nWatch all subdirectories (recursively)? (yes/no): ";
                $recursive = trim(fgets(STDIN));
                while($recursive != "yes" && $recursive != "no")
                {
                    echo "\nError: Invalid input!\nWatch all subdirectories (recursively)? (yes/no): ";
                    $recursive = trim(fgets(STDIN));
                }
                $recursive = $yesno_map[$recursive];
                
                echo "\nWatch hidden files and directories? (yes/no): ";
                $hidden = trim(fgets(STDIN));
                while($hidden != "yes" && $hidden != "no")
                {
                    echo "\nError: Invalid input!\nWatch hidden files and directories? (yes/no): ";
                    $hidden = trim(fgets(STDIN));
                }
                $hidden = $yesno_map[$hidden];
                
                echo "\nFollow sym links? (yes/no): ";
                $symlinks = trim(fgets(STDIN));
                while($symlinks != "yes" && $symlinks != "no")
                {
                    echo "\nError: Invalid input!\nFollow sym links? (yes/no): ";
                    $symlinks = trim(fgets(STDIN));
                }
                $symlinks = $yesno_map[$symlinks];
                
                echo "\nShow advanced options? (yes/no): ";
                $adv_options = trim(fgets(STDIN));
                while($adv_options != "yes" && $adv_options != "no")
                {
                    echo "\nError: Invalid input!\nShow advanced options? (yes/no): ";
                    $adv_options = trim(fgets(STDIN));
                }
                if ($adv_options == "yes") //TODO:  Need to complete the advanced options section.
                {
                    echo "Developers, Fixme!!\n";
                    exit (1);
                }
                
                $date_added = date("Y\-m\-d G:i:s");
                
                if($query->runQuery("insert into tbl_watches
					   (name,
                                            watch_path,
                                            event_ids,
                                            recursive,
                                            watch_hidden_directories,
                                            watch_hidden_files,
                                            exclusions_patterns,
                                            follow_symbolic_links,
                                            filter_by_group_owner,
                                            filter_by_user_owner,
                                            ignore_zero_files,
                                            verbose,
                                            allow_yelling,
                                            date_added,
                                            sync,
                                            active,
                                            wait_amount)
					   values('$watch_name',
                                                    '$watch_path',
                                                    '$event_ids',
                                                    $recursive,
                                                    $hidden,
                                                    $hidden,
                                                    $exclusion_patterns,
                                                    $symlinks,
                                                    $filter_by_group_owner,
                                                    $filter_by_user_owner,
                                                    $ignore_zero_files,
                                                    $verbose,
                                                    $allow_yelling,
                                                    '$date_added',
                                                    0,
                                                    1,
                                                    $wait_amount)"))
                {
                    echo "\nSuccessfully added watch.\n";
                }
                
	}
	else if ($user_input == 2)
	{
            $tbl_watches_array = $query->runQueryGetResults("select * from tbl_watches", "assoc");

            $watch_lookup = null;
            echo "\n\nWatch locations:\n";
            for($i = 0; $i < sizeof($tbl_watches_array); $i++)
            {
                    echo ($i + 1) . ".) => Path: " . $tbl_watches_array[$i]["watch_path"] . "  Active: " . $tbl_watches_array[$i]["active"] . "  Syncable:" . $tbl_watches_array[$i]["sync"] . "\n";
                    $watch_lookup[$i]["db_id"] = $tbl_watches_array[$i]["id"];
            }
            $watch_number = null;
            echo "\nEnter watch number to edit:";
            $watch_number = trim(fgets(STDIN));
            $watch_number = $watch_lookup[($watch_number - 1)]["db_id"];
            
            if ($watch_number != null)
            {
                $watch_details = $query->runQueryGetResults("select * from tbl_watches where id = $watch_number", "assoc");
                $watch_details = $watch_details[0];
            }
            
            echo "\nWatch details:";
            $keys = array_keys($watch_details);
            $i = 0;
            foreach($watch_details as $this_watch_detail)
            {
                if ($keys[$i] != "id")
                {
                    if ($this_watch_detail == "0" || $this_watch_detail == "1")
                    {
                        $this_watch_detail = $yesno_map[$this_watch_detail];
                    }
                    echo "\n " . $i . "). " . $keys[$i] . " = " . $this_watch_detail;
                }
                $i++;
            }
            echo "\nEnter watch setting number to edit: ";
            $edit_watch_setting = $keys[addslashes(trim(fgets(STDIN)))];
            echo "\nEnter new value for ($edit_watch_setting): ";
            $new_watch_setting = addslashes(trim(fgets(STDIN)));
            
            if ($new_watch_setting == "yes" || $new_watch_setting == "no")
            {
                $new_watch_setting = $yesno_map[$new_watch_setting];
            }
            
            $edit_watch_setting_id = $watch_details["id"];
            $date_modified = date("Y\-m\-d G:i:s");
            
            $query->runQuery("update tbl_watches set $edit_watch_setting = '$new_watch_setting', date_modified = '$date_modified' where id = '$edit_watch_setting_id'");
            
	}
	else if ($user_input == 3)
	{
            $tbl_watches_array = $query->runQueryGetResults("select * from tbl_watches", "assoc");

            $watch_lookup = null;
            echo "\n\nWatch locations:\n";
            for($i = 0; $i < sizeof($tbl_watches_array); $i++)
            {
                    echo ($i + 1) . ".) => Path: " . $tbl_watches_array[$i]["watch_path"] . "  Active: " . $tbl_watches_array[$i]["active"] . "  Syncable:" . $tbl_watches_array[$i]["sync"] . "\n";
                    $watch_lookup[$i]["db_id"] = $tbl_watches_array[$i]["id"];
            }
            $watch_number = null;
            echo "\nEnter watch number to delete/remove: ";
            $watch_number = trim(fgets(STDIN));
            
            $watch_id = $watch_lookup[($watch_number - 1)]["db_id"];
            
            // Make sure this watch is not part of a share.  If it is.  Tell the users to unshare and try again.
            $result = $query->runQueryGetResults("select * from tbl_shares where watch_id = $watch_id", "assoc");
            
            if (sizeof($result) > 0)
            {
                echo "\nYou are trying to remove a watch that is part of an existing share.  Please remove this watch from the share and try again.";
            }
            else
            {
                if($query->runQuery("delete from tbl_watches where id = $watch_id"))
                {
                    echo "\nSuccessfully removed the watch from the database.";
                }
            }
	}
	else if ($user_input == 4)
	{
            begin();
	}
}

function shares_setup()
{
    global $query, $afrs_client_obj, $yesno_map;
    
    $tbl_shares_array = $query->runQueryGetResults("select * from tbl_shares", "assoc");

    $share_lookup = null;
    echo "\n\nExisting shares:\n";
    /*for($i = 0; $i < sizeof($tbl_shares_array); $i++)
    {
            echo ($i + 1) . ".) => Path: " . $tbl_shares_array[$i]["watch_path"] . "\n";
            //$watch_lookup[$i]["db_id"] = $tbl_shares_array[$i]["id"];
    }
    $watch_number = null;*/
    echo "\nEnter watch number to delete/remove: ";
    $watch_number = trim(fgets(STDIN));
}
?>